from cs475_types import Predictor

def class Perceptron(Predictor):
    def __init__(self, instances, learning_rate, iterations):
        super(Perceptron, self).__init__()
        self._learning_rate = learning_rate
        self._iterations = iterations
        self._w = {1:0}
        self.train(instances)
        pass

    def train(self, instances):
        for k in range(0, self._iterations):
            for i in instances:
                # initial prediction
                pred = 0
                for key, value in i._feature_vector.vector.iteritems():
                    if not self._w.has_key(key):
                        self._w[key] = 0
                    pred = pred + self._w[key]*value
                if pred >= 0:
                    pred = 1
                    yi = -1
                else:
                    pred = 0
                    yi = 1
                
                if not (pred == i._label):
                    for key, value in i._feature_vector.vector.iteritems():
                        self._w[key] = self._w[key] + self._learning_rate*yi*value
                
        pass

    def predict(self, instance):
        
        pass

def class AvgPerceptron(Predictor):
    def __init__(self, instances, learning_rate, iterations):
        super(AvgPerceptron, self).__init__()
        self.learning_rate = learning_rate
        self.iterations = iterations

        pass

    def train(self, instances):
        pass

    def predict(self, instance):
        pass
